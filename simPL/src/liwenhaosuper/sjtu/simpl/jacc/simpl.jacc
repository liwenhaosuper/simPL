
%package liwenhaosuper.sjtu.simpl.jacc
%class SimPLParser
%interface SimPLTokens	

/**
 Token part
**/
//type
%token INTEGER BOOLEAN UNIT IDENT
// COLONCOLON: ::,COLONEQUAL: :=
%token ',' ';' COLONCOLON COLONEQUAL
//nop  
//NOT: not
%token '~' NOT
//bop
//AND: and OR: or
%token '+' '-' '*' '/' '<' '>' '=' AND OR
//ALLOW: ->
%token '(' ')' ALLOW
%token '$'
//keyword
%token LET IN IF THEN ELSE WHILE DO END FST SND HEAD TAIL FUN TRUE FALSE NIL

// level from low to high:
%left ';' 
%right ALLOW
%right COLONEQUAL
%right COLONCOLON
%left AND OR
%left  '=' '>' '<'
%left  '+' '-'
%left '*' '/'
%left  NOT '~'
%left FST SND HEAD TAIL 


 
%type <Expression> expr
%type <Value> val

%type <Variable> IDENT

%start prog

%{
import liwenhaosuper.sjtu.simpl.syntax.*;
import liwenhaosuper.sjtu.simpl.runtime.*;
import liwenhaosuper.sjtu.simpl.util.*;
import java.io.*;
%} 

//grammer
%%

prog : expr { app = $1;}
     ;

expr : IDENT			{ $$ = $1;}
	 | val				{ $$ = $1; }
	 | expr COLONCOLON expr { $$ = new List($1,$3);	}
 	 | '(' expr ',' expr ')' { $$ = new Pair($2,$4); }
 	 | '(' expr expr ')'  { $$ = new Application($2,$3); }
 	 
 	 //binary operation: plus, minus, times, devide, biggerThan, lessThan, equal, and, or
 	 | expr '+' expr { $$ = new BinaryOperation($1,$3,BinaryOperation.BinaryOperator.plus);} 
 	 | expr '-' expr { $$ = new BinaryOperation($1,$3,BinaryOperation.BinaryOperator.minus);} 
 	 | expr '*' expr { $$ = new BinaryOperation($1,$3,BinaryOperation.BinaryOperator.times); } 
 	 | expr '/' expr { $$ = new BinaryOperation($1,$3,BinaryOperation.BinaryOperator.devide); } 
 	 | expr '=' expr { $$ = new BinaryOperation($1,$3,BinaryOperation.BinaryOperator.equal); } 
 	 | expr '>' expr { $$ = new BinaryOperation($1,$3,BinaryOperation.BinaryOperator.biggerThan); } 
 	 | expr '<' expr { $$ = new BinaryOperation($1,$3,BinaryOperation.BinaryOperator.lessThan); } 
 	 | expr AND expr { $$ = new BinaryOperation($1,$3,BinaryOperation.BinaryOperator.and); }
 	 | expr OR expr { $$ = new BinaryOperation($1,$3,BinaryOperation.BinaryOperator.or); }
 	 
 	 //unary operation  
 	 | '~' expr	{ $$ = new UnaryOperation($2,UnaryOperation.UnaryOperator.not);}
 	 | NOT expr	{ $$ = new UnaryOperation($2,UnaryOperation.UnaryOperator.negative);}
 	  
 	 | LET IDENT '=' expr IN expr END  { $$ = new LetInEnd($2,$4,$6); } 
 	 | IF expr THEN expr ELSE expr END  { $$ = new IfThenElse($2,$4,$6); }
 	 | expr COLONEQUAL expr { $$ = new Assignment($1,$3);} 
 	 | expr ';' expr { $$ = new Sequence($1,$3); } 
 	 | WHILE expr DO expr END  { $$ = new WhileDoEnd($2,$4);}
 	 | FST expr { $$ = new First($2); }
 	 | SND expr { $$ = new Second($2);}
 	 | HEAD expr { $$ = new Head($2); }
 	 | TAIL expr { $$ = new Tail($2);}
 	 | '(' expr ')'  { $$ = new Bracket($2); }
 	 ;

val  : INTEGER	{ $$ = $1; } /*new IntValue(Integer.parseInt($1))*/
	 | BOOLEAN  { $$ = $1;} /*new BoolValue(Boolean.parseBoolean($1))*/
	 | NIL	{ $$ = new Nil(); }
	 | '(' ')' { $$ = new Nop();} 
	 | FUN IDENT ALLOW expr { $$ = new AnonymousFunction($2,$4); }
	 //conflict
	 //| '(' val ',' val ')' { $$ = new PairValue($2,$4);}
	 //| val COLONCOLON val { $$ = new ListValue($1,$3); }  
	 ;	
%%
	private Expression app;
	private SimPLLexer lexer;
	SimPLParser(SimPLLexer lexer){
		this.lexer = lexer;
	}
	private void yyerror(String msg) throws SimPLFatalException{
		lexer.error(msg);
	}
	public Expression getApp(){
		return app;
	}
	public static void main(String[] args){
		String filename = null,outfile = null;
		if(args.length>=2){
			for(int i=0;i<args.length;i++){
				if(args[i].equals("-f")||args[i].equals("-F")){
					if(i<args.length-1){
						filename = args[i+1];
						break;
					}
				}
			}
		}
		/*
		String lg = "Input Command:";
		for(int i=0;i<args.length;i++){
			lg+=args[i];
			lg+=" ";
		}
		Util.log(lg);
		*/
		InputStream ins = null;
		if(filename!=null&&filename.length()>4){
			if(!filename.contains(".spl")){
				Util.log("Input file name should have a suffix of \".spl\" ");
				return;
			}
			Util.loginit(filename.replaceAll(".spl", ".rst"));
			try {
				ins = new FileInputStream(filename);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				Util.log(e.getMessage());
			}
		}
		while(true){
			try{
				SimPLLexer lexer ;
				if(ins!=null){
					lexer = new SimPLLexer(ins);
				}else{
					Util.log("SimPL>");
					lexer = new SimPLLexer();
				}
				lexer.nextToken();
				SimPLParser parser = new SimPLParser(lexer);
				parser.parse();
				RunTimeState state = new RunTimeState();
				Util.init(state);
				Util.log(parser.getApp().eval().toString());
			}catch(SimPLFatalException e){
			 	Util.log(e.getMessage());
			}catch(StackOverflowError ee){
				Util.log("StackOverflowError!");
				//ee.printStackTrace();
			}catch(SimPLExitException eee){
				//Util.log("End of input");
				return;
			}catch(Exception eeee){
				return;
			}
			 Memory.getInstance().clean();
		}
	}