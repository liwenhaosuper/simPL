

let x = (1,2) in head x end $

if x = 1 then 2 $

let x = true in 1 $

while true do 0 end $

let f = fun x -> (if x = 1 then 1 else x*( f (x-1)) end ) in (f 4) end$


let f = fun x-> x+1 in (f 2) end$


let x=(1+2,false) in fst x end$


let x=1::2 in head x end$


let x=1::2::3 in tail x end$


let x=1 in if x=1 then true else false end end$


let x=fun z->z+1 in (x 1) end$


let m = fun x-> x+1 
in 
	let f = fun y -> (m y) 
	in (f 2)
	end
end$ 


let f = fun x-> if x < 0 then x else (f x-10) end
in (f 25)
end$


let
	f = fun x-> fun y->x+y
in
	((f 1) true)
end$


let x=2 in let y = (x,3) in fst y end end$


let x=1::2::3::4 in head x end$


let x=1::2::3::4 in head ( tail x ) end$


let x=1 in if x > 0 then 1 else 0 end end$


let f=fun x->fun y -> x+y in ((f 1) 2) end$


let f=fun x->(while x>0 do x:=x-10 end;x) in (f 25) end$


let f = fun x -> x + 1 in let x = 3 in (x:= (f 1);x) end end$


let f=fun x->fun y ->fun z->z+x+y in (((f 1) 2) 3) end$


let m = fun x-> x+1 in let f = fun x->fun y->x+y in ((f 2) (m 1)) end end$


let m = fun x-> x+1 in let f = fun x->fun y->x+y in ((f ( m 5) ) (m 1)) end end$


let mod = fun x->fun y->x-x/y*y
in 
	let 
		gcd = fun x-> fun y->
			if((mod x) y) = 0
			then y
			else ((gcd y) ((mod x) y))
			end
		in ((gcd 34986) 3087)
	end
end$

let f = fun x -> (if x = 1 then 1 else ( f (x-1))*x end ) in (f 4) end$

let f = fun x->x in let x = 2 in (f 3) + x end end$

let 
	f = fun x->x*x 
	in 
		let x = 2 
		in 
			(f (f 3)) + x 
		end 
end$


let abc = fun x -> 
	if x < 0 
	then	x
	else	(abc x-2)+(abc x-1) 
	end
in
	(abc 10)
end$


let 
	check = fun q -> fun p -> 
		let i = 1 in
			let b = q in
				let tag = true in
					while not (b = nil) and tag do
						let h = head b in
							tag := not (h = p or h - p = i or p - h = i);
							b := tail b;
							i := i + 1
						end
					end;
					tag
				end
			end
		end
	in
	let solve = fun n ->
		let queens = nil in
			if n < 0 or n = 0 
			then queens 
			else
				let i = 1 in
					while i < n + 1 do
						let j = 1 in
							while j < n + 1 do
								if ((check queens) j) 
								then
									queens := j :: queens;
									j := n + 1
								else
									if j = n then
										while (j > n or j = n) and i > 0 do
											j := head queens + 1;
											queens := tail queens;
											i := i - 1
										end
									else
										j := j + 1
									end
								end
							end;
							i := i + 1
						end
					end;
				queens
			end
		end
	end
	in
(solve 8)
end
end
$


let mod = fun x->fun y->x-x/y
in 
	let 
		gcd = fun x-> fun y->
			if((mod x) y) = 0
			then y
			else ((gcd y) ((mod x) y))
			end
		in ((gcd 34) 30)
	end
end$

let abc = fun x -> 
	if x < 0 
	then	x
	else	(abc x-2)+(abc x-1) 
	end
in
	(abc 50000)
end$